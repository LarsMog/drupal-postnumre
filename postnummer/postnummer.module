<?php // $Id$

/**
 * @file postnummer.module
 * Defines a CCK field and widget for Danish postal codes.
 */

/**
 * Implementation of hook_theme().
 */
function postnummer_theme() {
  return array(
    'postnummer_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'postnummer_formatter_code_only' => array(
      'arguments' => array('element' => NULL),
    ),
    'postnummer_formatter_city_only' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function postnummer_field_info() {
  return array(
    'postnummer' => array(
      'label' => t('Danish postal code'),
      'description' => t('Store Danish postal codes in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function postnummer_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $country_options = array(
        POSTNUMRE_DENMARK => t('Denmark'),
        POSTNUMRE_GREENLAND => t('Greenland'),
        POSTNUMRE_FAROE => t('Faroe Islands'),
      );
      $form['allowed_countries'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Allowed countries'),
        '#default_value' => is_array($field['allowed_countries']) ? $field['allowed_countries'] : array(1),
        '#options' => $country_options,
        '#description' => t('Select the countries that this field will accept (and suggest) postal codes from'),
      );
      return $form;

    case 'save':
      return array('allowed_countries');

    case 'database columns':
      $columns = array();
      $columns['code'] = array(
        'type' => 'char',
        'length' => '4',
        'not null' => FALSE,
        'sortable' => TRUE
      );
      // Normalise the city name, so we won't have to join the
      // postnumre table on every node_load.
      $columns['city'] = array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'sortable' => TRUE
      );
      return $columns;

    case 'views data':
      // 'views data' op copied verbatim from text.module
      // TODO: Figure out what's going on here.
      $allowed_values = content_allowed_values($field);
      if (count($allowed_values)) {
        $data = content_views_field_views_data($field);
        $db_info = content_database_info($field);
        $table_alias = content_views_tablename($field);

        // Filter: Add a 'many to one' filter.
        $copy = $data[$table_alias][$field['field_name'] .'_value'];
        $copy['title'] = t('@label (!name) - Allowed values', array('@label' => t($field['widget']['label']), '!name' => $field['field_name']));
        $copy['filter']['handler'] = 'content_handler_filter_many_to_one';
        unset($copy['field'], $copy['argument'], $copy['sort']);
        $data[$table_alias][$field['field_name'] .'_value_many_to_one'] = $copy;
        // Argument : swap the handler to the 'many to one' operator.
        $data[$table_alias][$field['field_name'] .'_value']['argument']['handler'] = 'content_handler_argument_many_to_one';
        return $data;
      }
  }
}

/**
 * Implementation of hook_field().
 */
function postnummer_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      $valid_items = array();
      foreach ($items as $delta => $item) {
        $matches = postnummer_api_freeform_search($item);
        if (count($matches) == 1) {
          $valid_items[$delta] = array('code' => $matches[0]['code'],
                                       'city' => $matches[0]['city']);
        }
      }
      $items = $valid_items;
      $node->$field['field_name'] = $valid_items;
      break;

    case 'sanitize':
      foreach ($items as $delta => $item) {
        $items[$delta]['safe'] = check_plain($item['code'] . ' ' . $item['city']);
      }
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function postnummer_content_is_empty($item, $field) {
  if (empty($item['value']) && (string)$item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function postnummer_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('postnummer'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'code_only' => array(
      'label' => t('Postal code only'),
      'field types' => array('postnummer'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'city_only' => array(
      'label' => t('City name only'),
      'field types' => array('postnummer'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' field formatter.
 */
function theme_postnummer_formatter_default($element) {
  return $element['#item']['safe'];
}

/**
 * Theme function for 'code_only' field formatter.
 */
function theme_postnummer_formatter_code_only($element) {
  return check_plain($element['#item']['code']);
}

/**
 * Theme function for 'city_only' field formatter.
 */
function theme_postnummer_formatter_city_only($element) {
  return check_plain($element['#item']['city']);
}


/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function postnummer_widget_info() {
  return array(
    'postnummer_textfield' => array(
      'label' => t('Text field with autocomplete'),
      'field types' => array('postnummer'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function postnummer_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
      $form['rows'] = array('#type' => 'hidden', '#value' => $rows);
      $form['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_postnummer_widget_settings_size_validate'),
        '#required' => TRUE,
      );
      return $form;

    case 'save':
      return array('rows', 'size');
  }
}

function _postnummer_widget_settings_size_validate($element, &$form_state) {
  $value = $form_state['values']['size'];
  if (!is_numeric($value) || intval($value) != $value || $value <= 0) {
    form_error($element, t('"Size" must be a positive integer.'));
  }
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function postnummer_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? implode(' ', $items[$delta]) : '',
  );
  return $element;
}
