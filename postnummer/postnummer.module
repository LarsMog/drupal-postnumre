<?php // $Id$

/**
 * @file postnummer.module
 * Defines a CCK field and widget for Danish postal codes.
 */

/**
 * Implementation of hook_theme().
 */
function postnummer_theme() {
  return array(
    'postnummer_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'postnummer_formatter_code_only' => array(
      'arguments' => array('element' => NULL),
    ),
    'postnummer_formatter_city_only' => array(
      'arguments' => array('element' => NULL),
    ),
    'postnummer_autocomplete' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function postnummer_field_info() {
  return array(
    'postnummer' => array(
      'label' => t('Danish postal code'),
      'description' => t('Store Danish postal codes in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function postnummer_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $country_options = array(
        POSTNUMRE_DENMARK => t('Denmark'),
        POSTNUMRE_GREENLAND => t('Greenland'),
        POSTNUMRE_FAROE => t('Faroe Islands'),
      );
      $form['allowed_countries'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Allowed countries'),
        '#default_value' => is_array($field['allowed_countries']) ? $field['allowed_countries'] : array(1),
        '#options' => $country_options,
        '#description' => t('Select the countries that this field will accept (and suggest) postal codes from'),
      );
      return $form;

    case 'save':
      return array('allowed_countries');

    case 'database columns':
      $columns = array();
      $columns['code'] = array(
        'type' => 'char',
        'length' => '4',
        'not null' => FALSE,
        'sortable' => TRUE
      );
      // Normalise the city name, so we won't have to join the
      // postnumre table on every node_load.
      $columns['city'] = array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'sortable' => TRUE
      );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function postnummer_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'sanitize':
      foreach ($items as $delta => $item) {
        $items[$delta]['safe'] = check_plain($item['code'] . ' ' . $item['city']);
      }
      break;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function postnummer_content_is_empty($item, $field) {
  if (empty($item['code']) || !is_numeric($item['code'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function postnummer_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('postnummer'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'code_only' => array(
      'label' => t('Postal code only'),
      'field types' => array('postnummer'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'city_only' => array(
      'label' => t('City name only'),
      'field types' => array('postnummer'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' field formatter.
 */
function theme_postnummer_formatter_default($element) {
  return $element['#item']['safe'];
}

/**
 * Theme function for 'code_only' field formatter.
 */
function theme_postnummer_formatter_code_only($element) {
  return check_plain($element['#item']['code']);
}

/**
 * Theme function for 'city_only' field formatter.
 */
function theme_postnummer_formatter_city_only($element) {
  return check_plain($element['#item']['city']);
}


/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function postnummer_widget_info() {
  return array(
    'postnummer_autocomplete' => array(
      'label' => t('Text field with autocomplete'),
      'field types' => array('postnummer'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_NONE,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function postnummer_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
      $form['rows'] = array('#type' => 'hidden', '#value' => $rows);
      $form['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_postnummer_widget_settings_size_validate'),
        '#required' => TRUE,
      );
      return $form;

    case 'save':
      return array('rows', 'size');
  }
}

function _postnummer_widget_settings_size_validate($element, &$form_state) {
  $value = $form_state['values']['size'];
  if (!is_numeric($value) || intval($value) != $value || $value <= 0) {
    form_error($element, t('"Size" must be a positive integer.'));
  }
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function postnummer_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#title' => $field['widget']['label'],
    '#weight' => $field['widget']['weight'],
    '#description' => $field['widget']['description'],
    '#required' => $field['required'],
    '#field' => $field,
  );
  return $element;
}

/**
 * Implementation of FAPI hook_elements().
 */
function postnummer_elements() {
  return array(
    'postnummer_autocomplete' => array(
      '#input' => TRUE,
      '#columns' => array('code'),
      '#process' => array('postnummer_autocomplete_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function postnummer_autocomplete_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $delta = $element['#delta'];

  $textfield_element = array(
    '#type' => 'textfield',
    '#maxlength' => '255',
    '#default_value' => isset($element['#value']['code']) ? $element['#value']['code'] : NULL,
    '#autocomplete_path' => 'postnummer/js',//. $element['#field_name'],
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );


  // Add our own validation step
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array();
  }
  array_unshift($element['#element_validate'], 'postnummer_autocomplete_validate');

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    // Wrapping the element around a text_textfield element creates a
    // nested element, so the final id will look like 'field-name-0-nid-nid'.
    '#value' => implode('][', array_merge($element['#parents'], array('postnummer', 'postnummer'))),
  );

  $element['postnummer_search'] = $textfield_element;
  return $element;
}

/**
 * Validate input to our field element.
 */
function postnummer_autocomplete_validate($element, &$form_state) {
  $field_key  = 'postnummer_search';
  $field_name = $element['#field_name'];
  $delta = $element['#delta'];
  $value = $element['#value'][$field_key];
  if (!empty($value)) {
    $matches = postnummer_api_freeform_search($value);
    if (!empty($matches)) {
      // Completely overwriting the values is a bit ugly, but it works.
      $form_state['values'][$field_name][$delta] = array(
        'code' => $matches[0]['code'],
        'city' => $matches[0]['city']
      );
    }
    else {
      form_error($element[$field_key],
        t('%code is not a valid Danish postal code',
        array('%code' => $value))
      );
    }
  }
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_postnummer_autocomplete($element) {
  return $element['#children'];
}

